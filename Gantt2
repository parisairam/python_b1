import pandas as pd
import plotly.figure_factory as ff
from datetime import datetime
import os

# Load the data from Excel file
current_directory = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(current_directory, "tasks_data 1.xlsx")
tasks_data = pd.read_excel(file_path)

# Preprocess the data
tasks_data['Milestone'] = tasks_data['Milestone'].fillna(method='ffill')
tasks_data['Status'] = tasks_data['Status'].fillna('Not Started')
tasks_data['Milestone'] = pd.Categorical(tasks_data['Milestone'],
                                         categories=["Development", "SIT", "QV", "Prod"],
                                         ordered=True)
tasks_data.sort_values(by=["Milestone", "Start Date"], inplace=True)

current_date = datetime.now()
tasks_data['Highlight'] = tasks_data.apply(
    lambda row: 'Overdue' if row['Status'] != 'Completed' and row['End Date'] < current_date else row['Status'],
    axis=1
)

# Color mapping for statuses
status_colors = {
    'Completed': 'green',
    'Overdue': 'red',
    'In-Progress': 'orange',
    'Not Started': 'grey'
}

# Prepare task-level data
def prepare_task_level():
    return [
        {
            "Task": f"{row['Milestone']} - {row['Task']}",
            "Start": row['Start Date'],
            "Finish": row['End Date'],
            "Resource": row['Highlight']
        }
        for _, row in tasks_data.iterrows()
    ]

# Prepare milestone-level data
def prepare_milestone_level():
    milestone_data = tasks_data.groupby("Milestone").agg(
        Start=("Start Date", "min"),
        Finish=("End Date", "max")
    ).reset_index()
    return [
        {
            "Task": row['Milestone'],
            "Start": row['Start'],
            "Finish": row['Finish'],
            "Resource": row['Milestone']
        }
        for _, row in milestone_data.iterrows()
    ]

# Create Gantt chart with explicit layout adjustments
def create_gantt_chart(data, title, start_date, end_date):
    fig = ff.create_gantt(data, index_col="Resource", group_tasks=True,
                          show_colorbar=True, title=title, showgrid_x=True, showgrid_y=True)
    
    # Set x-axis range to ensure all data is visible
    fig.update_layout(
        autosize=False,
        width=1500,  # Explicit width
        height=800,  # Explicit height
        xaxis=dict(range=[start_date, end_date]),
    )

    # Add current date as a vertical line
    current_date_str = current_date.strftime('%Y-%m-%d')
    fig.add_shape(
        type="line",
        x0=current_date_str,
        y0=0,
        x1=current_date_str,
        y1=1,
        line=dict(color="red", width=2, dash="dash"),
        xref="x",
        yref="paper"
    )
    
    # Add current date label
    fig.add_annotation(
        x=current_date_str,
        y=1.05,
        text=f"Today ({current_date_str})",
        showarrow=False,
        font=dict(color="red", size=12)
    )
    
    return fig

# Get the overall timeline range
min_date = tasks_data["Start Date"].min()
max_date = tasks_data["End Date"].max()

# Generate task-level and milestone-level Gantt charts
task_chart = create_gantt_chart(prepare_task_level(), "Task-Level Gantt Chart", min_date, max_date)
milestone_chart = create_gantt_chart(prepare_milestone_level(), "Milestone-Level Gantt Chart", min_date, max_date)

# Save both charts as standalone HTML divs
task_chart_html = task_chart.to_html(full_html=False, include_plotlyjs='cdn')
milestone_chart_html = milestone_chart.to_html(full_html=False, include_plotlyjs=False)

with open("combined_gantt_chart.html", "w") as f:
    f.write(f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Interactive Gantt Charts</title>
        <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
        <style>
            body {{
                margin: 0;
                padding: 0;
                font-family: Arial, sans-serif;
            }}
            .tab {{
                display: flex;
                border-bottom: 2px solid #ccc;
                background-color: #f1f1f1;
            }}
            .tab button {{
                background-color: inherit;
                border: none;
                outline: none;
                cursor: pointer;
                padding: 14px 16px;
                flex: 1;
                font-size: 16px;
                transition: background-color 0.3s;
            }}
            .tab button:hover {{
                background-color: #ddd;
            }}
            .tab button.active {{
                background-color: #ccc;
            }}
            .tabcontent {{
                display: none;
                width: 100%;
                height: calc(100vh - 60px); /* Full screen minus tab height */
                overflow-y: auto; /* Enable scrolling for large charts */
                padding: 0;
            }}
            .tabcontent.active {{
                display: block;
            }}
            .chart-container {{
                width: 95vw; /* Make the chart take 95% of the viewport width */
                height: 90vh; /* Make the chart take 90% of the viewport height */
                margin: auto; /* Center the chart horizontally */
            }}
        </style>
    </head>
    <body>

    <h1 style="text-align: center; margin: 10px 0;">Interactive Gantt Charts</h1>

    <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'TaskLevel')" id="defaultOpen">Task-Level Chart</button>
        <button class="tablinks" onclick="openTab(event, 'MilestoneLevel')">Milestone-Level Chart</button>
    </div>

    <div id="TaskLevel" class="tabcontent active">
        <div class="chart-container">
            {task_chart_html}
        </div>
    </div>

    <div id="MilestoneLevel" class="tabcontent">
        <div class="chart-container">
            {milestone_chart_html}
        </div>
    </div>

    <script>
        function openTab(evt, tabName) {{
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {{
                tabcontent[i].classList.remove("active");
            }}
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {{
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }}
            document.getElementById(tabName).classList.add("active");
            evt.currentTarget.className += " active";
        }}
        document.getElementById("defaultOpen").click();
    </script>

    </body>
    </html>
    """)

